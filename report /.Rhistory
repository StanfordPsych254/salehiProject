summary(model1)
kabel(model1)
kable(model1)
model1 <- lmer(rating ~ traitType * condition + (1 +traitType | workerid), data=d.b2)
model1
names(model1)
dims(model1)
model1[1,]
model1[,1]
model1$residuals
print(model1)
path <- "~/Documents/Mturk2/"
files <- dir(paste0(path,"production-results/"),
pattern = "*.json")
d.b <- data.frame()
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
trial_number_block=       as.factor(jd$answers$data$trial_number_block),
rating = as.numeric(jd$answers$data$rating),
gender = jd$answers$data$gender,
age = jd$answers$data$age,
sentence = jd$answers$data$sentence,
definition = jd$answers$data$definition,
political = jd$answers$data$political,
condition = as.factor(jd$answers$data$condition),
homelang = jd$answers$data$homelang,
income = jd$answers$data$income,
education = jd$answers$data$education,
ethnicity = jd$answers$data$ethnicity,
aim=jd$answers$data$expt_aim)
d.b <- bind_rows(d.b, id)
}
length(unique(d.b$workerid))
qplot(rating, data = d.b2, binwidth= 1, fill= traitType, facets = traitType ~ condition, geom = "histogram") +  scale_fill_manual(values=c("#FF6633", "#33CCCC")) +xlim(c(1,10))
theme(plot.title = element_text(lineheight=.8, face="bold"))
d.b2 %>%
ggplot(., aes(x = condition, y = rating, col = traitType)) +
geom_jitter(width = 0.25, height = 0.5) +
scale_colour_manual(values=c("#FF6633", "#33CCCC")) +
xlab("Condition") +
ylab("Rating") +
ggtitle("Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
qplot(rating, data = d.b2, binwidth= 1, fill= traitType, facets = traitType ~ condition, geom = "histogram") +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
xlim(c(1,10)) +
xlab("Condition") +
ylab("Rating") +
ggtitle("Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
d.b2 %>%
ggplot(., aes(x = condition, y = rating, col = traitType)) +
geom_jitter(width = 0.25, height = 0.5) +
scale_colour_manual(values=c("#FF6633", "#33CCCC")) +
xlab("Condition") +
ylab("Rating") +
ggtitle("Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC"))+
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggtitle ("Rating of Trait Centrality to Creativity across Conditions") +
theme_bw()
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), se =sem(rating))
ms1
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC"))+
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggtitle ("Rating of Trait Centrality to Creativity across Conditions") +
theme_bw()
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC"))+
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggtitle ("Rating of Trait Centrality to Creativity across Conditions") +
legend.title("Trait Type") +
theme_bw()
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), se =ci95(rating))
#including trait type and condition in grouping
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating))
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC"))+
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggtitle ("Rating of Trait Centrality to Creativity across Conditions") +
theme_bw()
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC"))+
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggtitle ("Rating of Trait Centrality to Creativity across Conditions") +
labels("Trait Type") +
theme_bw()
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
ylab("Average Rating") +
xlab("Condition") +
labs(colour="Trait Type") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
theme_bw()
fitConTrait <- aov(rating~(traitType*condition)+Error(workerid/(traitType))+(condition),data=d.b2)
summary(fitConTrait)
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.title = element_text(colour="Trait Type", size=16, face="bold")) +
theme_bw()
model2 <- lmer(rating ~ traitType * condition + gender + (1 +traitType | workerid), data=d.b2)
summary(model2)
kable(summary(model2)$coef)
model3 <- lmer(rating ~ traitType * condition + gender + educationL+ (1 + traitType | workerid), data=d.b2)
summary(model3)
kable(summary(model3)$coef)
model4 <- lmer(rating~ traitType * condition + gender + educationL+ ethnicityF+ (1 +traitType | workerid), data=d.b2)
summary(model4)
kable(summary(model4)$coef)
?filter
![Original-Graph]("~/Documents/Git/salehiProject/report/originalGraph")
!Original-Graph("~/Documents/Git/salehiProject/report/originalGraph")
![original graph](~/Documents/Git/salehiProject/report/originalGraph)
setwd("~/Documents/Git/salehiProject/report ")
![original graph](originalGraph.png)
install.packages("png")
??grid.raster
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
img <- readPNG(originalGraph.png)
grid.raster(img)
library(png, warn.conflicts = FALSE, quietly=TRUE)
library(grid, warn.conflicts = FALSE, quietly=TRUE)
img <- readPNG(originalGraph.png)
grid.raster(img)
img <- readPNG(originalGraph.PNG)
img <- readPNG("~/Documents/Git/salehiProject/report /originalGraph.png")
grid.raster(img)
levels(ms1$condition) <- c("Divergent", "Convergent")
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.title = element_text(colour="Trait Type", size=16, face="bold")) +
theme_bw()
rm(list=ls())
library(tidyr, warn.conflicts = FALSE, quietly=TRUE)
library(dplyr, warn.conflicts = FALSE, quietly=TRUE)
library(ggplot2, warn.conflicts = FALSE, quietly=TRUE)
library(langcog, warn.conflicts = FALSE, quietly=TRUE)
library(rjson, warn.conflicts = FALSE, quietly=TRUE)
library(tidyjson, warn.conflicts = FALSE, quietly=TRUE)
library(car, warn.conflicts = FALSE, quietly=TRUE)
library(effsize, warn.conflicts = FALSE, quietly=TRUE)
library(compute.es, warn.conflicts = FALSE, quietly=TRUE)
library(lme4, warn.conflicts = FALSE, quietly=TRUE)
library(lsr, warn.conflicts = FALSE, quietly=TRUE)
library(xlsx, warn.conflicts = FALSE, quietly=TRUE)
library(knitr, warn.conflicts = FALSE, quietly=TRUE)
library(png, warn.conflicts = FALSE, quietly=TRUE)
library(grid, warn.conflicts = FALSE, quietly=TRUE)
#functions for se and CI
sem <- function(x) {sd(x, na.rm=TRUE) / sqrt(length(x))}
ci95 <- function(x) {sem(x) * 1.96}
#Reading the path
path <- "~/Documents/Mturk2/"
files <- dir(paste0(path,"production-results/"),
pattern = "*.json")
d.b <- data.frame()
#reading the json files and turning them into one data.frame
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
trial_number_block=       as.factor(jd$answers$data$trial_number_block),
rating = as.numeric(jd$answers$data$rating),
gender = jd$answers$data$gender,
age = jd$answers$data$age,
sentence = jd$answers$data$sentence,
definition = jd$answers$data$definition,
political = jd$answers$data$political,
condition = as.factor(jd$answers$data$condition),
homelang = jd$answers$data$homelang,
income = jd$answers$data$income,
education = jd$answers$data$education,
ethnicity = jd$answers$data$ethnicity,
aim=jd$answers$data$expt_aim)
d.b <- bind_rows(d.b, id)
}
# Number of participants
length(unique(d.b$workerid))
d.b$condition
str(d.b$condition)
summary(d.b$condition)
#sanity check: copying the dataframe and applying the reformating in the copied version
d.b2 <- d.b
#reformating the data
d.b2 <- d.b2 %>%
#creating a bolean variable for traits: for masculine traits the variable is true otherwise it is false
mutate(trait = sentence %in% c('Decisive', 'Competitive', 'Self-reliant',   'Willing to take risks' , 'Ambitious', 'Daring' ,
'Adventurous' , 'Courageous')) %>%
#changing it to categorical variable
mutate(traitType = as.factor(ifelse(trait == TRUE, "Masculine", "Feminine"))) %>%
#creating a categorical variable for condition
mutate(condition = as.factor(condition)) %>%
#creating a categorical variable for gender
mutate(genderF = as.factor(gender)) %>%
#creating a linear continous variable for education
mutate(educationL = as.numeric(factor(education, levels=c("someMiddleSchool" ,
"someHighSchool", "highSchoolDrad","someCollege","collegeGraduate","someGrad","Grad")))) %>%
#creating a categorical variable for education
mutate(educationF = as.factor(education)) %>%
#creating a categorical variable for age
mutate(ageF = as.factor(age)) %>%
#creating a linear continous variable for age
mutate(ageL = as.numeric(factor(age, levels=c("0-17","18-24", "25-34","35-44","45-64","&gt;65")))) %>%
#creating a categorical variable for aethnicity
mutate(ethnicityF = as.factor(ethnicity)) %>%
#creating a linear continous variable for income
mutate(incomeL = as.numeric(factor(income, levels=c("LessThan15000" , "15000-24999", "25000-34999","35000-49999","50000-74999","75000-99999","100000-149999","150000-199999","morethan200000")))) %>%
#creating a categorical variable for income
mutate(incomeF = as.factor(income)) %>%
#creating a linear continous variable for political orientation
mutate(politicalL = as.numeric(political)) %>%
#creating a categorical variable for political orientation
mutate(politicalL = as.factor(political))
#including trait type and condition in grouping
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating))
ms1$condition
ms1$condition <- factor(ms1$condition, c("Divergent", "Convergent"))
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.title = element_text(colour="Trait Type", size=16, face="bold")) +
theme_bw()
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating)) %>%
factor(ms1$condition, c("Divergent", "Convergent")) %>%
factor(ms1$condition, c("Masculine", "Femenine"))
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating)) %>%
factor(ms1$condition, c("Divergent", "Convergent")) %>%
factor(ms1$traitType, c("Masculine", "Femenine"))
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating))
ms1
ms1$traitType
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating)) %>%
factor(ms1$condition, c("Divergent", "Convergent")) %>%
factor(ms1$traitType, c("Masculine", "Femenine"))
```
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating)) %>%
factor(ms1$condition, c("Divergent", "Convergent"))
#reading the json files and turning them into one data.frame
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
trial_number_block=       as.factor(jd$answers$data$trial_number_block),
rating = as.numeric(jd$answers$data$rating),
gender = jd$answers$data$gender,
age = jd$answers$data$age,
sentence = jd$answers$data$sentence,
definition = jd$answers$data$definition,
political = jd$answers$data$political,
condition = as.factor(jd$answers$data$condition),
homelang = jd$answers$data$homelang,
income = jd$answers$data$income,
education = jd$answers$data$education,
ethnicity = jd$answers$data$ethnicity,
aim=jd$answers$data$expt_aim)
d.b <- bind_rows(d.b, id)
}
# Number of participants
length(unique(d.b$workerid))
#sanity check: copying the dataframe and applying the reformating in the copied version
d.b2 <- d.b
#reformating the data
d.b2 <- d.b2 %>%
#creating a bolean variable for traits: for masculine traits the variable is true otherwise it is false
mutate(trait = sentence %in% c('Decisive', 'Competitive', 'Self-reliant',   'Willing to take risks' , 'Ambitious', 'Daring' ,
'Adventurous' , 'Courageous')) %>%
#changing it to categorical variable
mutate(traitType = as.factor(ifelse(trait == TRUE, "Masculine", "Feminine"))) %>%
#creating a categorical variable for condition
mutate(condition = as.factor(condition)) %>%
#creating a categorical variable for gender
mutate(genderF = as.factor(gender)) %>%
#creating a linear continous variable for education
mutate(educationL = as.numeric(factor(education, levels=c("someMiddleSchool" ,
"someHighSchool", "highSchoolDrad","someCollege","collegeGraduate","someGrad","Grad")))) %>%
#creating a categorical variable for education
mutate(educationF = as.factor(education)) %>%
#creating a categorical variable for age
mutate(ageF = as.factor(age)) %>%
#creating a linear continous variable for age
mutate(ageL = as.numeric(factor(age, levels=c("0-17","18-24", "25-34","35-44","45-64","&gt;65")))) %>%
#creating a categorical variable for aethnicity
mutate(ethnicityF = as.factor(ethnicity)) %>%
#creating a linear continous variable for income
mutate(incomeL = as.numeric(factor(income, levels=c("LessThan15000" , "15000-24999", "25000-34999","35000-49999","50000-74999","75000-99999","100000-149999","150000-199999","morethan200000")))) %>%
#creating a categorical variable for income
mutate(incomeF = as.factor(income)) %>%
#creating a linear continous variable for political orientation
mutate(politicalL = as.numeric(political)) %>%
#creating a categorical variable for political orientation
mutate(politicalL = as.factor(political))
#rating vs. condition and traits
qplot(rating, data = d.b2, binwidth= 1, fill= traitType, facets = traitType ~ condition, geom = "histogram") +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
xlim(c(1,10)) +
xlab("Condition") +
ylab("Rating") +
ggtitle("Rating Across Conditions & Trait Types") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating)) %>%
factor(ms1$condition, c("Divergent", "Convergent"))
ms1 <- d.b2 %>%
group_by(condition, traitType) %>%
summarize(mean = mean(rating), ci95 =ci95(rating))
ms1$condition <- factor(ms1$condition, c("Divergent", "Convergent"))
ms1$traitType <- factor(ms1$traitType, c("Masculine", "Feminine"))
ms1 %>% ggplot(., aes(x = condition,y = mean,fill = traitType)) +
geom_bar(position = 'dodge',stat ='identity', width = 0.5) +
geom_errorbar(aes(ymin = mean-ci95, ymax = mean+ci95),
width = .2,                    # Width of the error bars
position = position_dodge(0.5)) +
scale_fill_manual(values=c("#FF6633", "#33CCCC")) +
ylab("Average Rating") +
xlab("Condition") +
ggtitle("Average Trait Rating Across Conditions") +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.title = element_text(colour="Trait Type", size=16, face="bold")) +
theme_bw()
?as.factor
model1.3 <- lmer(rating ~ traitType * condition + (1 +traitType | workerid) + (1|traitType), data=d.b2)
kable(summary(model1.1)$coef)
kable(summary(model1.3)$coef)
model1.4 <- lmer(rating ~ traitType * condition + (1 +traitType | workerid) + (1+condition|traitType), data=d.b2)
model1.1 <- lmer(rating ~ traitType * condition + (1 | workerid), data=d.b2)
kable(summary(model1.1)$coef)
model1.2 <- lmer(rating ~ traitType * condition + (1 +traitType | workerid), data=d.b2)
kable(summary(model1.2)$coef)
lrtest(model1.1 , model1.2)
library(lmtest, warn.conflicts = FALSE, quietly=TRUE)
lrtest(model1.1 , model1.2)
model1.3 <- lmer(rating ~ traitType * condition + (1 +traitType | workerid) + (1|traitType), data=d.b2)
kable(summary(model1.3)$coef)
lrtest(model1.2 , model1.3)
model2.1 <- lmer(rating ~ traitType * condition + gender + (1 +traitType | workerid), data=d.b2)
model2.2 <- lmer(rating ~ traitType * condition * gender + (1 +traitType | workerid), data=d.b2)
lrtest(model2.1 , model2.2)
model2.1 <- lmer(rating ~ traitType * condition + gender + (1  | workerid), data=d.b2)
model2.2 <- lmer(rating ~ traitType * condition * gender + (1  | workerid), data=d.b2)
lrtest(model2.1 , model2.2)
model1.1 <- lmer(rating ~ traitType * condition + (1 | trait), data=d.b2)
kable(summary(model1.1)$coef)
model1.2 <- lmer(rating ~ traitType * condition + (1 + condition| trait), data=d.b2)
summary(model1.2)
lrtest(model1.1 , model1.2)
model1.3 <- lmer(rating ~ traitType * condition + (1 | trait) +  (1 | workerid), data=d.b2)
kable(summary(model1.3)$coef)
lrtest(model1.1 , model1.3)
head(d.b2$trait)
#reading the json files and turning them into one data.frame
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
trial_number_block=       as.factor(jd$answers$data$trial_number_block),
rating = as.numeric(jd$answers$data$rating),
gender = jd$answers$data$gender,
age = jd$answers$data$age,
sentence = jd$answers$data$sentence,
definition = jd$answers$data$definition,
political = jd$answers$data$political,
condition = as.factor(jd$answers$data$condition),
homelang = jd$answers$data$homelang,
income = jd$answers$data$income,
education = jd$answers$data$education,
ethnicity = jd$answers$data$ethnicity,
aim=jd$answers$data$expt_aim)
d.b <- bind_rows(d.b, id)
}
# Number of participants
length(unique(d.b$workerid))
#sanity check: copying the dataframe and applying the reformating in the copied version
d.b2 <- d.b
#reformating the data
d.b2 <- d.b2 %>%
#creating a bolean variable for traits: for masculine traits the variable is true otherwise it is false
mutate(trait = sentence %in% c('Decisive', 'Competitive', 'Self-reliant',   'Willing to take risks' , 'Ambitious', 'Daring' ,
'Adventurous' , 'Courageous')) %>%
#changing it to categorical variable
mutate(traitType = factor(ifelse(trait == TRUE, "Masculine", "Feminine"), levels=c("Masculine","Feminine"))) %>%
#including the trait themselves
mutate(trait=factor(sentence))  %>%
#creating a categorical variable for condition
mutate(condition = factor(condition,levels=c("Divergent","Convergent"))) %>%
#creating a categorical variable for gender
mutate(genderF = as.factor(gender)) %>%
#creating a linear continous variable for education
mutate(educationL = as.numeric(factor(education, levels=c("someMiddleSchool" ,
"someHighSchool", "highSchoolDrad","someCollege","collegeGraduate","someGrad","Grad")))) %>%
#creating a categorical variable for education
mutate(educationF = as.factor(education)) %>%
#creating a categorical variable for age
mutate(ageF = as.factor(age)) %>%
#creating a linear continous variable for age
mutate(ageL = as.numeric(factor(age, levels=c("0-17","18-24", "25-34","35-44","45-64","&gt;65")))) %>%
#creating a categorical variable for aethnicity
mutate(ethnicityF = as.factor(ethnicity)) %>%
#creating a linear continous variable for income
mutate(incomeL = as.numeric(factor(income, levels=c("LessThan15000" , "15000-24999", "25000-34999","35000-49999","50000-74999","75000-99999","100000-149999","150000-199999","morethan200000")))) %>%
#creating a categorical variable for income
mutate(incomeF = as.factor(income)) %>%
#creating a linear continous variable for political orientation
mutate(politicalL = as.numeric(political)) %>%
#creating a categorical variable for political orientation
mutate(politicalL = as.factor(political))
model1.1 <- lmer(rating ~ traitType * condition + (1 | trait), data=d.b2)
#printing out the table of fixed-effect results
kable(summary(model1.1)$coef)
model1.2 <- lmer(rating ~ traitType * condition + (1 + condition| trait), data=d.b2)
kable(summary(model1.2)$coef)
lrtest(model1.1 , model1.2)
model1.3 <- lmer(rating ~ traitType * condition + (1 + condition | trait) +  (1 | workerid), data=d.b2)
kable(summary(model1.3)$coef)
lrtest(model1.2 , model1.3)
model1.4 <- lmer(rating ~ traitType * condition + (1 + condition | trait) +  (1 + traitType | workerid), data=d.b2)
kable(summary(model1.4)$coef)
lrtest(model1.3 , model1.4)
model2.1 <- lmer(rating ~ traitType * condition + gender + (1 +condition | trait), data=d.b2)
kable(summary(model2.1)$coef)
model2.2 <- lmer(rating ~ traitType * condition * gender + (1 +condition | trait), data=d.b2)
kable(summary(model2.2)$coef)
lrtest(model2.1 , model2.2)
model3 <- lmer(rating ~ traitType * condition + educationL+ (1 +condition | trait), data=d.b2)
kable(summary(model3)$coef)
model4 <- lmer(rating~ traitType * condition + ethnicityF+ (1 +condition | trait), data=d.b2)
kable(summary(model4)$coef)
model1.4 <- lmer(rating ~ traitType * condition + (1 + condition | trait) +  (1 +traitType | workerid), data=d.b2)
lrtest(model1.3 , model1.4)
kable(summary(model1.4)$coef)
